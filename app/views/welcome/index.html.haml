.jumbotron
  .container
    %h1 Welcome

    %p This is the Tuttle Demo application which demonstrates the capabilities of Tuttle.
    %p This application is a Rails 4.1+ minimal application with Devise and CanCan gems installed.

    %p= link_to 'Tuttle Dashboard Â»', tuttle.root_path, :class=>['btn','btn-primary','btn-lg'], :role=>'button'

.row
  .col-md-4
    .h2 Rails
    %p
      This basic Rails application consists of a few controllers and a few models hitting a PostgreSQL database.
    %p
      Tuttle can help inspect Rails applications with knowledge of configuration best practices.
    %p= link_to 'Tuttle Rails', tuttle.rails_path, :class=>['btn','btn-primary'], :role=>'button'

  .col-md-4
    %h2 Gems
    %p
      This application includes several open source Gems which Tuttle can detect.
    %ul
      %li Devise authentication with self registration
      %li CanCan authorization with simple rules
    %p
      = link_to 'Tuttle Devise', tuttle.devise_path, :class=>['btn','btn-primary'], :role=>'button'
      = link_to 'Tuttle CanCan', tuttle.cancancan_path, :class=>['btn','btn-primary'], :role=>'button'

  .col-md-4
    #permissions.panel.panel-default
      .panel-heading
        %h3.panel-title Demo Permissions
      .panel-body
        %p You #{ can?(:update, User) ? 'can':'can not' } update a user
        %p You #{ can?(:update, User) ? 'can':'can not' } update a user
        %p You #{ can?(:action_a, User) ? 'can':'can not' } action_a a user
        %p You #{ can?(:action_b, User) ? 'can':'can not' } action_b a user
        %p You #{ can?(:action_c, User) ? 'can':'can not' } action_c a user
        %p You #{ can?(:action_d, User) ? 'can':'can not' } action_d a user

    #helpers.panel.panel-default
      .panel-heading
        %h3.panel-title Helper Output
      .panel-body
        %p= application_helper_example
        %p= welcome_helper_example

    #caching.panel.panel-default
      .panel-heading
        %h3.panel-title Cached Output
      .panel-body
        - cache('test') do
          %p Test
        - cache(['test','array']) do
          %p Test with array of keys
        - cache_if(!!params[:test], params[:test]) do
          %p Test with test_if(#{!!params[:test]}, #{params[:test]})
        - cache('test_without_digest', skip_digest: true) do
          %p Test without digest
        - cache('test_with_expires', expires_in: 1.minute) do
          %p Test with 1 minute expiration at #{Time.now}
        - cache(['test','array']) do
          %p Test with array of keys
        - cache('test_with_force', force: true) do
          %p Test with :force => true
        - cache('test_with_compress', compress: true) do
          %p Test with :compress => true
        - cache('test_with_raw', raw: true) do
          %p Test with :raw => true
        - # no example of :race_condition_ttl option
